import json

import openai
import asyncio
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
import time
import math
import os

with open("./config.json", 'r') as jsf:
    json_data = json.load(jsf)
    token = json_data["TOKEN"]
    openai.api_key = json_data["API_KEY"]

bot = Bot(token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send(message: types.Message):
    await message.answer(
        ' –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å ChatGPT –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.\n\n –î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç:\n ‚Äì–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å.\n ‚Äì–£–∫–æ—Ä–æ—Ç–∏—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n ‚Äì–í —Ü–µ–ª–æ–º –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ:)\n\n –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –æ–±—ä—è—Å–Ω–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á—Ç–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–¥–µ–ª–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: "–û —á–µ–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç? ..."')


@dp.message_handler()
async def send(message: types.Message):
    await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞üìö')
    start = time.time()
    response = openai.ChatCompletion.create(
        model='gpt-3.5-turbo',
        messages=[
            {'role': 'user', 'content': message.text}
        ],
        temperature=0
    )
    await message.answer(response['choices'][0]['message']['content'])
    end = time.time()
    await message.answer(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {math.trunc(end - start)} —Å–µ–∫—É–Ω–¥ üï∞")
    print(message.text, '\n', len(message.text))


executor.start_polling(dp, skip_updates=True)
